// 充电 功耗 电源 电路
// V1.0

// 充电方案
Q:设计充电方案的主要考虑要点
A:1.确保绝对安全；  2.在1的前提下，最大限度充满电，物尽其用；  3.在1.2的前提下，充电时间尽可能短。
Q:充电芯片的双回路机制
A:充电时，充电芯片有两个回路，一路给电池充电，一路给手机供电。即电池不给手机供电。如果手机有大电流需求，则用充电器和电池一起供电。
Q:电池容量和放电时间1
A:容量为1600毫安时（一般简称毫安）的电池，满电情况下以160mA的电流放电，可持续工作10小时。
Q:电池容量和放电时间2
A:另一个单位是瓦时（wH）。由于手机锂电池的标准发电电压是3.7v，所以和毫安时等价。换算公式为：1wH = 3.6AH。
Q:大功率充电器
A:智能手机电池一般都在1500毫安以上，为适应大电池，充电器都切换为1A/5V的大功率充电器。
Q:传统LDO充电模式的缺点
A:充电器变大后，传统LDO充电的问题就暴露了：电流容易过载、发热量大、充电时间过长。取而代之的是DCDC方式。
Q:TI的BQ24152方案介绍1
A:1.DCDC充电管理芯片；  2.通过I2C总线进行参数设置和状态输出。
Q:TI的BQ24152方案介绍2
A:3.支持涓流、恒流、恒压三种模式；  4.当输入电压过高或过低时自动进入保护模式，停止充电。
Q:充电方案step1：涓流充电
A:开始充电时，如果电池电压低，必须用小电流充电，即涓流充电。因为电池电压低的情况下，大电流充电，电池内阻会急剧升高，结果一是充不进去，二是发热伤害电池。
Q:充电方案step1：涓流充电门限
A:充电电压5V，电流100mA；电池电压2.8v-3.2v（3，2v相当于电池电量0%）。充电时间一般为10分钟。
Q:充电方案step2：恒流充电
A:电池电压在3.2v以上，开始用大电流充电，即采用允许的最大电流充，以节省时间。这是充电的主要区间。
Q:充电方案step2：恒流充电门限
A:充电电压5v，充电电流：标准充电器800mA-1A，usb充电器450mA；非标充电器450-500mA。而电池电压由3.2v-》4.2v。这个阶段在2-3个小时左右。
Q:充电方案step3：恒压充电
A:电池电压到了4.2v时，电池接近充满，此时转入恒压充电，保持电池电压基本不变，逐步减小充电电流，以避免过充。
Q:充电方案step3：恒压充电门限
A:充电电压5v，充电电流逐步减小。电池电压由4.2v-》4.25v。充电时间一般在1个小时左右。
Q:充电方案总结
A:充电电压不变，保持5v；充电电流一直在变化。电池电压一直在升高，电池电压作为充电流程控制的主变量。通过电压估计电池电量。
Q:电池电压从哪里来？
A:通过ADC采样获得。
Q:手机显示的电量百分百从哪里来？
A:当前充电流程控制中，通过电池电压估计电量。在非充电状态下，精度有保障。但在充电模式下，有增压问题。
Q:所谓增压问题是什么？
A:在充电时，由于电池内阻，电压上升得比较快，电压和电量的关系变得非线性，精度偏差较大。一般会采用经验值做一定的平滑，即电量表。
Q:何谓电量表？
A:电量表就是个数组，第一个数据是1%电量对应的电压值，第二个是2%电量的电压值，如此类推。一般有四张电量表，分别对应放电、充电器充电、usb充电、非标充电器充电。
Q:更优的方法是？
A:使用库仑计（电量计），直接测量电池电荷量，精度高，没有增压问题。
Q:睡眠中的搜网动作
A:进入睡眠后，大约每2.56秒，手机会醒来查看是否有呼入。并检查是否有用户按下按键。
Q:DRX周期
A:非连续接收周期，手机用这个机制来省电。比如GSM drx周期为1.18秒，WCDMA为2.56秒。

Q:充电过程的常见异常
A:（1）恒流无法转恒压；（2）充电不截止； （3）零星脉冲充电； （4）二次充电（和增压问题有关）； （5）涓流无法转恒流。
Q:关机充电（1）
A:关机充电时，手机启动到recovery（即kernel），但不进Android。而modem侧都启动了。所以不做处理的话，是可以被打通电话的，只是无法接。
Q:关机充电（2）
A:进关机充电条件的判断是在oemsbl中。具体条件见下。
Q:关机充电的条件
A:（1）电池和充电器是否都在位； （2）是否为正常开机，包括闹钟开机、按power键开机、用户重启开机； （3）是否为异常开机，包括watchdog reset开机和瞬间掉电开机； （4）misc分区中的充电使能标志的值。
Q:misc分区中的充电使能标志的功能
A:给app使用，但他们想开机，而不是关机时，去使能这个标志，以避免不开机而进关机充电界面。
Q:Charger充电限流
A:华为标配充电器限流1A或800mA，标配的条件是D+、D-短接；非标充电器限流400-500mA。
Q:USB充电限流
A:按spec规定，USB充电必须限流。其中USB插入协商阶段，限流100mA，正常充电时限流400-450mA。
Q:USB充电时，不能进入tx_wait状态
A:原因是防止电流倒灌，在usb睡眠时可能发生。

// 充电方案之代码结构
Q:PMIC芯片中断
A:PMIC上的所有中断源都会通过PM_INT（为1个GPIO）上报给MSM，MSM在收到了PM_INT中断后，再到PMIC上去索引当前是PM的哪个中断源引起的中断，然后执行相应的服务程序。
Q:pm_isr()
A:pmic芯片的isr进程。象chg_charger_isr()、usbotg_isr()都是在这里被调用，其它函数包括：pm_init_delayed(), pm_clear_irq(),pm_set_irq_handle()。
Q:关机充电流程1
A:osbl判断满足关机充电条件，将进recovery标志写入misc分区，将关机充电标志写入misc分区。后者可以通过 cat /proc/app_info/charge_flag 来查看。
Q:关机充电流程2
A:进入recovery后，再通过 /proc/app_info/charge_flag 标志确认是否进关机充电界面。
Q:关机充电流程3
A:充电动画处理：recovery中有一套基于framebuffer的图形接口，在 bootable/recovery/miniui/graphices 中。
Q:关机充电之按键处理
A:进入充电前，recovery启动一个叫 charge_input_thread 的线程处理按键，其中音量上下键只起唤醒作用，power键起关机作用。
Q:关机充电之充电状态监控
A:使用线程 charge_check_thread。主要是通过读写接口 /sys/class/power_supply/battery 来获取。

// 放电
Q:电池相关需要校准的的数据
A:电量表、温度曲线。注意是一个产品一套，当然如果一个产品用多种电芯，就需要多种电量表（电池需要提供识别它们的方法）。
Q:电池校准
A:电池校准发生在CT中，程控电源设定n个电压（3.4v、3.7v、4.2v），分别读取ADC值5次，取平均值，保持到nv中。
Q:电池校准的测试
A:在BT和MT中，对电压校准值进行测试，如果差距大于0.03V（一个ADC raw值的偏差），则认为电池校准失败。
Q:充放电log的开关
A:开关在工程菜单中，log文件保存在efs中的chg_log目录下。
Q:充放电log的格式
A:时间：V_BAT=4200（电压值）；BAR=5（电量图标的显示格数）；mv=4173（电压值）；offset=18（电压的变化指）；T=32（电池温度）。
Q:电池的放电区间
A:区间在 3.4v-4.2v，其中大部分电流分布在3.5v-3.6v之间，低于3.4v，电量极少；低于3.2v，手机会自动关机。
Q:放电时，电池电压读取周期
A:当电量为0、1、2格时，15秒读一次；3、4、5格时，30秒读一次。开机时，第5秒读第一次。
Q:0格电压门限
A:3.46V
Q:电池放电平滑算法
A:本次结果=0.875*上次结果+0.125*本次ADC采样值。
Q:开机时特殊处理
A:电池电压读数不准，所以把前两次都丢弃掉。只使用65秒的值。
Q:电量显示
A:之前华为方案中，每格电量均等。分析nokia的方案，满格占40%电量，1格占的极少，我们后来也如此调整了。
Q:低电报警
A:低电报警后，要留一些电给用户作紧急处理。nokia这方面做得比较好。

// 电源管理
Q:LDO电源
A:PM芯片有多个LDO，用于提供不同的电压。LDO特点是其电压受软件控制。
Q:rex系统配置电源的api
A:pm_vreg_set_level(PM_VREG_RFRX1_ID, 2850); 单位为毫安。
Q:rex系统开关电源的api
A:pm_vreg_control(PM_ON_CMD, ***)。
Q:sdram电源的开关
A:sdram电源在上电时打开，关机是才能够下电。
Q:sim卡电源控制
A:打开：uim_power_up() -> uim_powerup();   关闭：uim_power_down()。
Q:MPP
A:多功能脚，主要用于电平转换。可做电源用，其特点是软件可以通过控制其内部电阻来设定其通过的电流大小。其它功能包括数字采用、模拟采样、数字输出、模拟输出。
Q:常用的MPP管脚
A:其中MPP4的电流区间是[40ma,150ma]，MPP3的电流区间为[150ma,600ma]。
Q:mic bias电源
A:mic bias即mic的偏置电压，为mic供电。在使用mic前必须把它拉高，不用时处在低电平。
Q:power键处理
A:（A平台上）power键直接接到PMIC的KPDPWR_IN脚上，但它被拉低后，PM将工作，给CPU供电，CPU开始工作。
Q:硬件归一化方案
A:单卡产品，L15给camera用；双卡产品，sim卡用。
Q:Y210产品没有用归一化方案
A:单卡产品，没有用L15；双卡产品，sim卡用；C10产品，DTV用。
Q:电源使用：获取电源对象
A:vreg_get()，根据字符串获取电源对象vreg；
Q:电源使用：电源字符串的定义
A:字符串与电源对象的对应关系，见全局变量 vreg vregs[]，后者保存这种："msma”-id:0，“msmp”-id:1；
Q:电源使用：设置电压
A:vreg_set_level(vreg_gp2, 1800); vreg_gp2是电源对象；1800是电压值，单位是毫伏。实际上是通过rpc让modem侧配置。
Q:电源使用：使能
A:

// 电路
Q:mos管在电路中的作用
A:开关电源
Q:电感在电路中的作用
A:滤波，平滑电流的波峰波谷，即所谓的毛刺。电感通过电磁感应原理，暂存能量。经过的电流越大，磁场越强；而磁场也会转成电流。这样，波峰的电流的一部分能量将转成磁场，并传递给后续电流。
Q:电阻在电路中的作用
A:电阻是耗能器件，通过将电能转化为热能，在电路中起分压分流作用。其中，并联时分压；串联时分流。
Q:电容在电路中的作用
A:和电感类似，电容也用于滤波。它通过内部的电解质（液体）暂存能量，将波峰的能量吸收，并补偿给波谷。电路设计上，电容要尽量靠近地和供电管脚。
Q:几种电学单位的隐喻
A:电量库仑是数量之总量值，本质是电子的数量，“微安时”等价于库仑；  电流安培是数量之流量值，即总量/时间；  电压伏特是质量值，即每个个体的能量值；  功焦耳是效用之总量值，功率是效用之流量值（所谓效用是指对他者的作用）。
Q:电平
A:电平即电路中两点间的电量单位的相对比值，单位即为分贝。电量单位包括功率、电压、电流。
Q:欧姆定律
A:I（电流）= U（电压）/ R（电阻）
Q:电功率公式
A:P（功率）= W（功率）/ t（时间）= I^2·R = I^2/R = I·U
Q:锁相环
A:sd卡时钟最高可为50M，比手机主晶振（19.2M）要高，是因为用了锁相环。
Q:芯片的core电压和IO电压
A:CPU的工作电压分为两个方面，CPU的核心电压与I/O电压。核心电压即驱动CPU核心芯片的电压，I/O电压则指驱动I/O电路的电压。通常CPU的核心电压小于等于I/O电压。
Q:
A:

// 如何看懂硬件原理图
Q:U401
A:cpu芯片
Q:U201
A:pmic芯片
Q:S1-S4
A:pmic提供的电源，软件不可控，手机上电就打开了，而且不可关闭。
Q:U601
A:flash芯片
Q:L201
A:L开头的都是电感，2.2uH。
Q:C233
A:C开头的都是电容，2.2uF。
Q:R1815
A:R开头的都是电阻，10kO。
Q:SG205v
A:SG开头的是单点接地。
Q:电池正负极图标
A:表示接地。
Q:GND
A:也表示接地。
Q:手机接地的含义
A:手机不可能真正接地。其接地是指接到电池负极。一般电路板会规定一个“地”层，所有的地线都接到那里，然后再连接到电池负极。
Q:如何防静电？
A:暴露在外面的接口，电路都加了稳压管之内来防止静电；还有就是加强接地，比如camera，外框要接地，否则静电导致混乱。

// 功耗管理的代码结构
Q:功耗管理
A:android的功耗管理只要通过锁和定时器来切换系统状态，使功耗降低到最低。
Q:功耗管理之app层1
A:powermanager.java 会声明一个wakelock基类，有两个成员，acquire 和 release。
Q:功耗管理之app层2
A:需要进行睡眠控制的类，会定义 wakelock成员，通过qcquire接口来禁止睡眠，通过release接口来允许睡眠。要成对使用，否则导致系统无法进睡眠。
Q:功耗管理之framework层
A:powermanager service.java是核心。power.java 为接口io层，访问jni层。jni层代码主要是android_os_power.cpp。
Q:功耗管理之hal层
A:hal层与kernel交互的是power.c，交互方式是通过sys文件系统，syscall。
Q:应用层保持屏幕亮的流程1
A:TimerOutTask(screen) -> setPowerState() -> Power.setScreenState() -> set_screen_state() // jni
Q:应用层保持屏幕亮的流程2
A:write("/sys/power/state") -> state_store() -> state_store()；后面分为两支，MEM 则进入 early_syspend(), ON 则进入 late_resueme().
Q:应用禁止进睡眠的流程
A:PowerManagerService.java -> Power.java -> acquire_wake_lock -> write "/sys/power/wake_lock" -> wake_lock_store() -> wake_lock() -> wake_lock_time_out()
Q:应用允许进睡眠的流程
A:PowerManagerService.java -> Power.java -> release_wake_lock -> write "/sys/power/wake_unlock" -> wake_unlock_store() -> wake_unlock() -> has_wake_locked == 0 -> suspend_work()
Q:应用层的两种wakelock（1）
A:一种是partial wakeup，申请了这种，即使按power键，系统也不进sleep，比如music player。
Q:应用层的两种wakelock（2）
A:其它类型的wakeup，按power键，系统进sleep。各自锁的定义常见 newWakeLock.c。

Q:kernel的功耗管理机制（1）
A:代码kernel/kernel/power。wakelock模块主要维护两个链表。应用申请lock，在调用wakelock()中插入active_wake_locks链表。
Q:kernel的功耗管理机制（2）
A:被释放的 lock ，调用 wakeunlock(),会将其移动到 inactive_locks 队列中去。
Q:kernel的功耗管理机制（3）
A:在调用 wakeunlock() 中，以及定时器到时间时，会调用 has_wake_lock_locked()来看是否有active的lock，如果没有，则启动 suspend_unlock 工作队列，执行睡眠流程。
// 这两套说法只有一套是对的。周一去确认下。
Q:kernel的PM管理（1）
A:在android睡眠中，有3个suspend_work_queue队列来处理睡眠准备、睡眠和睡眠恢复。它们是early_suspend_work, suspend_work, late_resume_work。
Q:kernel的PM管理（2）
A:通常会把LCD和背光驱动注册为early_suspend_work，以便第一阶段被关闭。
Q:kernel的PM管理（3）
A:kernel会去查看wakelock是否全部释放，如果是，则启动suspend_work队列，让所有设备进入suspend状态，并停止时钟。
Q:kernel的PM管理（4）
A:modem侧的pm管理，是把android task作为睡眠的一票。

// 功耗测试指标
Q:最大通话电源指标
A:nand手机cmu最大通话电源是270mA。
Q:基底电流
A:小于等于2mA。
Q:我司电池认证的测试标准（1）
A:循环放电400次后，满充容量不少于标称的80%。
Q:我司电池认证的测试标准（2）
A:倍率放电测试，要求放电电流和放电时间满足倍率关系。
Q:我司电池认证的测试标准（3）
A:高温测试，要求在-30到130度测试下，电池不燃烧；60度存放7天，剩余电量大于90%；70度存放一天，剩余电量大于90%。
Q:我司电池认证的测试标准（4）
A:过充测试，要求4.6V充电保持7小时电池不燃烧。

// 手机器件的典型功耗（有些值不是很对劲） 
Q:手机器件的典型功耗：SDRAM
A:读写刷新：60-65mA（＊2，有两块）；静态电流：200uA（＊2）
Q:手机器件的典型功耗：Nand flash
A:工作：10-20mA；静态：<1mA
Q:手机器件的典型功耗：camera
A:工作：100mA；静态：uA级
Q:手机器件的典型功耗：LCD
A:工作：50mA；静态：30uA
Q:手机器件的典型功耗：LCD背灯
A:工作：75mA；静态：uA级
Q:手机器件的典型功耗：EL灯片
A:工作：70mA；静态：uA级
Q:手机器件的典型功耗：RF+PA发射（高通套片）
A:工作（GSM）2.35mA；静态：nil
Q:手机器件的典型功耗：RF+PA接受（高通套片）
A:工作（GSM）2.15mA；静态：nil

// rf电路电源控制
Q:rf电路电源控制
A:无线模式中有自己的睡眠状态，它进入睡眠，会引起arm的睡眠和pm内部电源状态的改变。
Q:进入GSM模式
A:执行 rfllgsm_enable_tx()，开启发送电路的数模转换电路和放大电路、开启发送电路的电源补偿、开启放大电路的温度电源补偿等。
Q:退出GSM模式
A:执行 gl1_hw_inact() -> rfgsm_disable_tx()，上面过程的逆过程。
Q:进入GSM睡眠
A:GSM首先进入DRX状态，然后再进入sleep，rfllgsm_sleep()，关闭rf，使基带睡眠；
Q:唤醒GSM
A:rfgsm_wakeup()。
Q:进入WCDMA模式
A:rfllumts_enable_tx()，打开发送电路，包括数模转换电路、调制器、RFT芯片、增益。
Q:停止WCDMA模式
A:rfllumts_disable_tx()，关闭发送电路。
Q:进入WCDMA睡眠
A:rfllumts_sleep()。
Q:唤醒WCDMA
A:rfllumts_wakeup()

// 功耗调试
Q:rex睡眠管理（1）
A:睡眠由sleep task控制，它的优先级最低。
Q:rex睡眠管理（2）
A:睡眠采用投票机制，和睡眠相关的task都投票同意睡眠，然后sleep task会让设备进入睡眠。
Q:功耗调试的目标
A:在搜到网的情况下，手机能及时（1-2分钟不操作）进入睡眠状态，基底电流降低到2mA以下。
Q:功耗调试的步骤1：是否进待机
A:手机是否能待机，没进待机则tcxo晶振不会关，一般功耗在40mA以上。此时看哪个task没投票；或者直接量tcxo的信号。
Q:确认手机是否进待机的方法
A:在sleep_check_for_tcxo_shut_down()打断点，或者用高通后台看 sleep task的信号量。
Q:功耗调试的步骤2：GPIO
A:如果能进，则调功耗正式开始。先看GPIO，先只看我们改过的，看进待机时是否配为低功耗状态。
Q:GPIO的低功耗模式
A:这个要具体调试。以下是经验值：硬件外部上拉，则将GPIO上拉，以降低功耗。外部电阻大，则不拉。外部电阻小，则一起拉，即外部上拉就上拉，外部下拉就下拉。
Q:功耗调试的步骤3：电源等
A:查电源，常出问题的一般是E电源、P电源、BT、camera、mmc、sim用的电源。看原理图，看是否有倒灌电路，一般一边拉高、一边拉低，就会倒灌。

Q:功耗调试经验（1）
A:BT电源是功耗大户，拔器件看功耗有没有改善。
Q:功耗调试经验（2）
A:board id相关的gpio要细调，有时候会有四五mA的漏电。
Q:功耗调试经验（3）
A:常见问题包括：PA开关、TF卡电源、mac bias电源。
Q:功耗调试经验（4）
A:rf电源如果有问题，功耗会差很多。包括rftx、rfrx1、rfrx2、s2、s3、wlan等。先看能不能关，不能关看有没有省电模式。
Q:功耗调试经验（5）
A:调整好软件流程。系统有中断马上会启动tcxo，电流起码40mA。
Q:功耗调试经验（6）
A:上拉电阻的阻值要尽量大一些，保证静态电流尽量小。
Q:功耗调试经验（7）
A:慎用三极管做开关，因为管子本身电流大。
Q:功耗调试经验（8）
A:外围芯片中，对于提供shutdown状态的芯片要尽量提供控制电路，软件要确保待机前使之进入shutdown。
Q:功耗调试经验（9）
A:射频发射功耗大，尽量做到高效率，减少不必要的延迟和重传，当然要懂这块之后再调。
Q:功耗调试经验（10）
A:I2C关闭时，要作为GPIO来关，否则关不彻底。

Q:功耗优化的思路（1）
A:临区测量对待机的影响；
Q:功耗优化的思路（2）
A:搜网时间间隔；小区切换频繁的定位方案、优化方案；
Q:功耗优化的思路（3）
A:通话和待机时CPU主频的优化；
Q:功耗优化的思路（4）
A:周期位置更新周期和每次时长的记录，及优化方案；
Q:功耗优化的思路（5）
A:背光、马达等的设置，和业界方案对比。
Q:功耗优化的思路（6）
A:声音播放过程中的优化。

// 其它
Q:示波器的探头
A:示波器的探头分为有源和无源两种。无源探头加大了信息负载，导致信号质量下降。
Q:热插拔器件的电路设计
A:为稳定识别，在位检测引脚应该是最后生效的引脚。

// 热
Q:热方案
A:充电时用电池的热敏电阻，放电时用cpu的热敏电阻。
Q:手机温升控制方案（1）
A:放电时，通过CPU旁边的热敏电阻监控CPU温度，超过门限（43℃左右）就降频。
Q:手机温升控制方案（2）
A:充电时，通过充电芯片旁边的热敏电阻监控充电芯片的温度，超过门限（48℃左右）就限流。
Q:手机温升控制方案（3）
A:充电时，如果用户玩大型游戏，或者长时间通话，CPU温升可能超过充电芯片，导致方案（2）失效。所以在充电时需要监控两个数据。
Q:手机温升控制方案（4）
A:CPU有过热保护，8x25Q平台是85℃手机就自动关机。
Q:温升业界指标（1）
A:从业界看环境温度25度下，要求不超过43度是一个业界基本采用的标准（刚好温升18度）。
Q:温升业界指标（2）
A:40度以上温度刺激明显，45度以上可能受伤。G610C上按照温升18度要求已经是43度了 43度已经在温度刺激明显区域，




