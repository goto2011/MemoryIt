// arm芯片 汇编 中断 总线 时钟
// V1.0

// 硬件寄存器
Q:r0
A:返回值
Q:r1 - r4
A:入参（但并不意味着入参只能有四个）
Q:r13
A:堆栈指针
Q:r14
A:当前函数的返回地址；如果为异常模式，即为异常模式的返回地址；
Q:r15
A:PC 指针，总是指向下一步要执行的代码。
Q:CPSR
A:当前arm模式
Q:SPSR
A:如果arm运行在异常模式下，则保存着之前模式的CPSR。
Q:软件和硬件的接口
A:硬件寄存器是软件与硬件的唯一接口；软件通过硬件寄存器来控制硬件。
Q:硬件中断
A:arm芯片支持的硬件中断是芯片规定死的，不可修改。rex系统只支持硬中断，目前系统中有50几个中断源。

Q:arm的7种处理器模式（1）
A:User：普通程序运行的模式
Q:arm的7种处理器模式（2）
A:System：可以运行操作系统的特权指令
Q:arm的7种处理器模式（3）
A:Superisor：操作系统保护模式
Q:arm的7种处理器模式（4）
A:Abort：例外和异常。可用来实现虚存和内存保护
Q:arm的7种处理器模式（5）
A:Undefied：未定义指令模型。可用于实现硬件协处理器的软件模拟
Q:arm的7种处理器模式（6）
A:Interrupt：IRQ，中断处理。
Q:arm的7种处理器模式（7）
A:Fast interrupt：FIQ，快中断。
Q:arm的处理器模式
A:除user外，其它6种模式称为特权模式；在特权模式中，除system外，其它5种称为异常模式。

// arm汇编
Q:B：跳转（类似goto）
A:注意，B后面的地址是与r15的偏移量，24位长，即只支持向前向后32M的跳转。
Q:BL：函数跳转（类似call）
A:跳转之前，先把 r15->r14，等调用完，将 r14->r15就可以返回原地址继续执行。
Q:MOV：赋值
A:mov R0,R0,LSL#3 //即R0=R0*8；  mov pc,R14   //即PC=R14。 被move的可以是寄存器，或立即数。
Q:MVN：赋值
A:与mov的区别在于赋值前值会被反转，算法是+1，再取反。  mvn R0,#4  //即R0=-5。
Q:LSL
A:逻辑左移
Q:何谓立即数？
A:即常量，用#做前缀。如 #5即表示立即数5。
Q:LDR / STR, 读/写内存
A:LDR R1,R14  //将R14中保存的地址写入R1；  STR R1,R14  // 将R14的值写入R1保存的内存地址里去。
Q:CMD：比较
A:比较两个值，如果大，则执行GT指向的指令。
Q:ADD/SUB/MUL
A:加减乘。ADD dest <value1> <value2>, 即dest=value1+valve2；其它类似。
Q:adc
A:进位加法。add最高位不进位。
Q:ADR：取内存地址放在寄存器中
Q:AND/ORR
A:逻辑与/或指令
A:ADR r0,address
Q:entry
A:为程序执行的入口点
Q:area
A:定义一个段
Q:end
A:标识源文件结束
Q:SWI
A:软中断指令
Q:stmdb
A:压栈动作

// 函数调用时的堆栈使用情况（开始感觉这部分更应该放在内存部分，反复思考后还是放在这里）
Q:函数调用时的堆栈使用情况（1）
A:stmdb r13!,{r4-r6,r14}。 stmdb中的db表示decrease before，压栈时，r13 的值先减少，再压栈。r4-r6,r14:显示压栈顺序为r14、r6、r5、r4。
Q:函数调用时的堆栈使用情况（2）
A:sub r13,r13,#0x40。 压栈后分配一块空间给局部变量。此处为64字节。
Q:函数返回时的堆栈使用情况（1）
A:add r13,r13,#0x40。释放栈中用于局部变量的空间。
Q:函数返回时的堆栈使用情况（2）
A:ldmia r13!,{r4-r6,pc}。lamia中的ia表示increase after，出栈时，栈顶的内容先出栈，r13在增加。然后r4、r5、r6、r14先后出栈（即写入各寄存器）
Q:函数返回时的堆栈使用情况（3）
A:注意，原来r14的值写入PC寄存器，从而达到跳转到返回地址的目的。
Q:调用函数
A:用 blx 函数名。

// GPIO
Q:GPIO中断源
A:GPIO相关的中断源有两个（GPIO 0-38、67-105用一个，39-61用另外一个）。任何GPIO状态变化，都会触发这两个中断源中的一个。
Q:GPIO的输出电流
A:配置为输出时，输出电流为5ma，不过高通做了扩张，驱动能力可配置为High和Normal两种，前者7ma，后者5ma。配置为输入或不拉时，也有小的输出电流，不超过1ma。
Q:GPIO的第二功能
A:第二功能即在某种情况下的复用。第一功能和第二功能不能同时用。使用BIO_FUNC_SELECT()来设置。
Q:代码中如何读写硬件寄存器？
A:输入：hwio_inm(NAND_FLASH_ECC_0,,)；  输出：gpio_out(camif_shdn_ins, GPIO_LOW_VALUE)
Q:GPIO的level触发和沿触发
A:level触发，只要器件状态改变，中断一直会触发；沿触发（detect_edge），只有在改变发生时触发一次，分为上升沿触发和下降沿触发。
Q:如何看GPIO状态？
A:gpio_configs[]可看到GPIO配置情况；bio_gpio_image[]，对于输出的GPIO，可看到其值，每位对应一个GPIO。对于配成输入的GPIO，只能使用标准接口来读。
Q:GPIO状态
A:两个维度：input/output; pull_up/pull_down/nopull.
Q:何为上拉和下拉？
A:上拉就是将不确定的信号通过一个电阻嵌位在高电平，电阻同时起限流作用。下拉类似。
Q:如何实现上拉和下拉？
A:上拉时，手机上通过电阻上拉到某一电源上，从而维持一个高电平。下拉是通过电阻接到地，保持0v。这就是“嵌位”。
Q:GPIO上下拉对外部电路的影响
A:上拉时对外部电路注入电流，可起到供电作用。
Q:GPIO上拉的驱动能力（即供电能力）
A:GPIO上拉的强弱取决于上拉电阻的阻值不同。电阻大，电流小，节约功耗；电阻小，电流大，驱动能力强。
Q:空悬管脚为何要接上拉？
A:管脚空悬比较容易收外界电磁干扰，接一个上拉电阻可降低输入阻抗。
Q:不拉
A:高阻态，就是nopull，一般设置几M欧以上的电阻，以阻断电路。
Q:漏电流
A:直接将上拉电阻和下拉电阻连通，即产生漏电流，将导致功耗偏大。
Q:ap侧配置GPIO：定义GPIO变量
A:类似这样：struct msm_gpio dtv_cfg_data[]={GPIO_CFG(20, 0, GPIO_CFG_OUTPUT, GPIO_CFG_NO_PULL, GPIO_CFG_2MA), "dtv_reset"}};
Q:ap侧配置GPIO：配置
A:msm_gpios_request_enable(dtv_cfg_data, ARRAY_SIZE(dtv_cfg_data));
Q:ap侧配置GPIO：去激活
A:msm_gpios_disable_free()，// config失败后调用。
Q:ap侧配置GPIO：
A:gpio_direction_output()。
Q:寻找哪里修改GPIO状态的一个技巧？
A:trace跟踪中，在gpio_configs[]处打写断点，就可以找到。

// ADC
Q:ADC
A:模数转化器：analog to digital converter。
Q:ADC的原理1
A:ADC的作用是通过硬件将一个模拟电平转换成0-255的一个数组（又叫raw值），软件通过算法将raw值转化为实际电平。
Q:ADC的原理2
A:一些器件的测试单位就是电压，如电池电压、充电器电压，可直接转换。某些指标不是电压，比如PA温度、电池温度等，则通过热敏电阻将温度转换为电压，其转换公式需要校准。
Q:高通平台ADC的采样精度
A:0.008mV。
Q:GPIO和ADC（1）
A:两者都是CPU引脚。GPIO只有高和低两种状态，是典型的数字引脚；ADC是多值，可测量外围电路的电压（高通平台支持0-255种状态）。
Q:GPIO和ADC（2）
A:GPIO有输入、删除两种模式。输出模式下，可控制外围电路，并可提供5mA的电流来驱动一些小器件。ADC只有输入。
Q:GPIO和ADC（3）
A:GPIO有中断和轮训两种访问方式；ADC只有轮询。
Q:GPIO和ADC的数量
A:arm9有100多个GPIO引脚，但ADC只有7个。其中一个接到PM上，又被分为10个，当然精度只有原来的1/10。一共可用的有16路。
Q:adc的控制代码
A:pm_adc_config_mux()，设置adc的三个属性，即通路控制、adc offset值和gain增益控制。
Q:增益
A:一个系统的输出和输入的比率，单位是分贝（dB），比较对象一般是电压、电流或功率。
Q:为何要做gain增益控制？
A:要保证AMUX_IN*（1-16）输入到MSM芯片上时，电压范围在0-2.5v之间，因为后者只支持这个范围。
Q:如何将msm的mpp与pmic上的adc通路连接上？
A:通过 pm_mpp_config_analog_input()完成。

// 硬件版本号方案
Q:硬件版本号的几种方案
A:最早是04年，方案是放在flash中的一个叫hwinfo的独立分区中。06年做U120项目时，改为当前方案，采用GPIO识别。mtk平台有类似方案，使用adc。
Q:硬件版本号方案1
A:采用GPIO识别方案，一共采用4个GPIO表示硬件版本。
Q:硬件版本号方案2
A:其中2个表示主版本号，标识不同产品；另外2个表示子版本号，标识硬件改版、器件替代和延伸产品。
Q:硬件版本号方案3
A:每个GPIO有三种内部状态：up、down、nopull（不拉）。即主版本号空间和子版本号空间各为9个。

// 中断与异常
Q:中断
A:中断来自cpu外部，终端发生时，cpu状态不可预测。所以，cpu只有在完成当前指令后才能处理中断。（原子操作会导致中断响应慢）
Q:异常
A:异常来自cpu内部。异常发生时，cpu状态可以预知，因此它可打断当前指令的执行而实时执行。即它的实时性强于中断。
Q:modem代码中的中断主控方式
A:tramp_isr()
Q:中断向量表（1）
A:内存0地址放着系统的中断向量表。arm9的向量表如下：0x0是系统的reset；0x4是Undefied instruction（未定义的指令）。
Q:中断向量表（2）
A:0x8是软中断；0xc是P Abort（code区错误访问，即指针跑飞）、0x10是D Abort（data区错误访问，即内存错误）
Q:中断向量表（3）
A:0x18是IRQ（中断，这个是系统稳定运行的基石）、0x1C是FIQ（快中断）。
Q:判断当前是否在中断中
A:rex_is_in_irq_mode()
Q:开关中断的方法
A:
Q:rex的中断处理流程（1）
A:中断发生后，cpu改变模式为IRQ模式，切换寄存器bank，并从0x18取得RAM_FIQ_VECTOR的执行地址。
Q:rex的中断处理流程（2）
A:跳转到该地址后，会执行此处的b IRQ_Handler指令。后者完成CPU模式切换，进行压栈，然后执行isr处理函数（即tramp_isr()）。
Q:rex的中断处理流程（3）
A:tramp_isr()查中断向量表，即 isr_func_tbl[]分发中断isr。
Q:如何定义isr？
A:如，usbotg_startup()中定义isr，tramp_set_isr(TRAMP_USB_ISR, usbotg_isr)，TRAMP_USB_ISR 即中断号为57，在 tramp.h 定义。
Q:tramp_init()
A:中断是在 tmc_init() 中定义。
Q:FIQ的处理函数
A:rex_fiq_vector()。
Q:中断处理之前一定要锁中断
A:进入isr处理后，如果不锁中断，新的中断来了，可能导致重入；如果是沿触发，则这个中断后面就不会再发。
Q:中断返回的处理（1）
A:先进程恢复上下文（必须先恢复，因为此时压栈是压在中断栈中），检查是否要切换进程。
Q:中断返回的处理（2）
A:如果没有高优先级任务处在就绪态，或者进程切换被禁止，则恢复之前的进程上下文，并继续执行之。若需要进行任务切换，则切换到选中的任务运行。
Q:中断之间是否允许抢占？
A:中断之间允许；FIQ中断不允许，因为所有FIQ中断的优先级都一样。
Q:中断调用的log
A:有一个数组记录所有中断发生的时间、执行的时间和中断类型，即tramp_log，默认能记录200条，在debug版本中可加大到20000。定位中断问题非常有用。

// 时钟
Q:设置外围设备的时钟
A:clk_regime_set_periph_clk()
Q:7x30的时钟
A:1.PBL runs at TCXO；2.DBL runs at 48 MHz；3.OSBL runs at 384 MHz；4.AMSS and android会按需运行中不同主频上。
Q:系统的几种晶振（时钟源）
A:RTC时钟，也叫睡眠时钟。频率是32.768K。它由纽扣电池供电，在系统掉电时还在跑。
Q:TCXO时钟
A:TCXO时钟，频率是19.2M。I2C用TCXO时钟。
Q:unix/linux的时间戳
A:是一个32位的数字，记录从1970-1-1 0:0:0（UTC）到系统当前时间的秒数。这个时间是unix诞生的时间，通常被称为POSIX_TIME。
Q:2038年问题
A:unix采用32位保存时间戳，到2038-1-19 11:14:07（UTC）会翻转，这就是“2038年问题”。为避免这个问题，最新系统将时间戳改为64位。
Q:windows的时间戳
A:微软windows的时间戳为64位，开始时间从1601-1-1 0:0:0开始。
Q:UTC时区
A:UTC表示的格林威治时间，又称为世界标准时间，与中国用的时区差8小时。不考虑时区的时间是无意义的。
Q:CST时区（中国时区）
A:中国时区叫CST，即东八区，UTC比CST早8小时。
Q:获取系统时间
A:fs_time_jnl_from_secs()。获取的时间格式为julian历，即年-月-日-时-分-秒。
Q:rex动态调整cpu速率的方法（1）
A:申请提高，由task调用，只有部分task有权利。api是 clk_regime_register_for_cpu_resource()。
Q:rex动态调整cpu速率的方法（2）
A:申请恢复CPU速率。api是 clk_regime_deregister_for_cpu_resource()。
Q:AP侧如何查看CPU频率？
A:cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies，显示的最后一个数字即是，如 1152000即1.2G。

// 手机总线类型
Q:串口
A:UART(TX,RX)就是两线，一根发送一根接收，可以全双工通信。数据是异步传输的，对双方的时序要求比较严格，通信速度也不是很快。优势是实现简单。
Q:SPI总线
A:SPI，Serial Peripheral Interface：串行外设接口。SBI总线是moto提出的串口总线标准。
Q:SPI总线的优势
A:和串口比，SPI多了一条同步时钟线。因此对通信双方的时序要求不严格，不同设备之间可以很容易结合，而且速度较快。一般用在内部元件之间的高速数据通信上，如大容量存储器等。
Q:SBI总线的实现原理
A:SBI有三线，由3根GPIO实现。其中SBST用于数据传输初始化；SBDT用于双向数据传输，SBCK提供时钟。它被用于CPU和其它外围芯片的通讯。代码高通没有提供。
Q:MDDI总线
A:MobileDisplayDigitalInterface，高通公司于2004年提出的，通过减少连线可提高可靠性并降低功耗，这将取代SPI模式而成为移动领域的高速串行接口。
Q:MDDI的连线
A:连线主要是host_data，host_strobe，client_data，client_strobe，power，GND（地）几根线。

// I2C总线
Q:I2C总线
A:由80年代飞利浦发明。I2C占用的空间小，目前广泛用于系统内部。
Q:I2C的物理结构
A:I2C由数据线SDA和时钟线SCL构成，串行线。各器件均并联在一条总线上。
Q:I2C总线的优点1
A:占用的空间小。总线的长度可最高25英尺，能以10Kbps的最大传输速率支持40个组件。
Q:I2C总线的优点2
A:它支持多主控(multimastering)，其中任何能够进行收发的设备都可以成为主总线。一个主控能够控制信号的传输和时钟频率。当然，在任何时间点上只能有一个主控。
Q:I2C的控制方式
A:各器件均并联在一条总线上，但每个器件都有唯一地址。在信息的传输过程中，每一器件既可能是主控器或被控器，也可能是发送器或接收器，这取决于它所要完成的功能。
Q:I2C总线是慢速设备
A:它不适用于需要高速刷新的器件，否则大部分CPU时间就会耗在读I2C上。一般刷新频率不能超过30Hz。
// I2C总线的控制代码，包括modem侧和ap侧。 todo

Q:DMA传输必须4字节对齐
A:让某个变量四字节对齐：__align(4)；让某个文件4字节对齐：#pragma pack(4)
Q:DMA不能用cache
A:所以为DMA传输分配的内存，要用专门内存分配接口。普通接口分配的内存会被系统放进cache中。

// review软硬件接口文档的关注点
Q:review 电源部分
A:电源设计经常出问题，为重中之重。要关注电源和高通原始不一致的地方。比如各个电源的使用，默认为关的电源如何打开，有没有顺序，进待机时的电源管理。关注A电源、E电源、WLAN电源。
Q:review GPIO的修改
A:GPIO的配置，为软硬件联调的主要工作。也是重中之重。要严格禁止各模块直接用in或out接口控制GPIO，必须用BIO模块的宏来控制。review代码时要把关。
Q:review 新增功能
A:这个经常被硬件忽视。硬件有自己的器件规划，会有选择的在多个产品中落地。
Q:review board id
A:要重点review本产品的board id的规划。
Q:review 和切换相关的设计是否有改变
A:比如usb和充电器的识别；耳机插拔识别；耳机线控的按下抬起；不同LCD、不同camera、不同TP的识别；LCD、camera的总线类型。
Q:review 频段
A:注意，如果是公司从未使用的频段，调试射频nv的周期会很长，这个一定要有思想准备。
Q:软硬件调试的一个教训
A:最难发现的错误往往是在自己非常熟悉的代码中由于笔误引起的。
Q:软硬件调试的第二个教训
A:从零开始build有时候可以解决很多莫名其妙的问题。

// 熔丝
Q:熔丝
A:熔丝都是一次性可写，将寄存器中熔丝对应的bit设置为1，则熔丝将被熔断，不再可写入。
Q:熔丝的用法
A:系统支持两个熔丝，硬件寄存器 config_lsb 和 config_msb。
Q:熔丝相关的工具
A:高通的写工具有QDART，相关diag命令是：FTM_QFUSE_READ, FTM_QFUSE_WRITE。







