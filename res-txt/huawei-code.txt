// 华为软件管理
// V0.7     2013-2-9     add 软件经理部分
// V0.8     2013-3-10    继续扩充软件经理部分，add 电信需求部分
// V0.81    2013-4-7     add git

// 目录
// 1.软件经理工作
// 2.版本相关工作
// 3.产品分支策略
// 4.大团队终端定制软件开放管理
// 5.jack谈爱立信经验
// 6.华为手机软件的现状
// 7.git
// 8.BOARD ID管理

// 软件经理工作
Q:华为的问题
A:从来没有时间正确的做事，却总有时间把事情做两遍。
Q:软件经理的核心目标
A:是保证软件版本的高质量交付。
Q:软件经理的工作
A:问题单解决计划（每周一两次）、版本计划（每周一次）、需求管理（按需）、器件替代计划（来自硬件）、基线升级计划（按需）、风险问题单同步计划（每周一次）、组织质量问题回朔（按需）、产品例会（每周一次）。
Q:手机产品线转测试版本的限制
A:A类项目，转测试版本：15个，包括烧片和升级。B类项目10个，C类项目5个。
Q:DU下发的无效版本数指标
A:无效版本数的指标是3%以内，无效版本占各领域KPI的20-30%。
Q:软件经理工作
A:tr3-tr6压力一直很大。占据时间最多的工作有两项：出版本和问题单跟踪。
Q:日常关键点
A:（1）需求--》问题单--》版本--》转测试；（2）器件替代--》版本--》小批量试制--》正式归档
Q:例行工作及原则（1）
A:版本计划为统一各领域行为的发动机。一定要掌握好节奏。（上次整理的路线图很不错）
Q:例行工作及原则（2）
A: 每周出一个版本，至少提前3天把问题单解决计划达成共识，和各资源组PL和测试经理确认清楚，然后发送软件+测试全员。
Q:例行工作及原则（3）
A:版本出来后，组织预测试、问题单回归，要提前整理好问题单回归列表。归档版本必须做CTS。
Q:例行工作及原则（4）
A:每周转一个版本给测试，转的同时，要附上预测试报告和合入问题单回归列表，以及测试建议，包括高风险和遗留问题。
Q:例行工作及原则（5）
A:围绕问题单展开工作；所有的需求、器件调试、器件变更都必须第一时间变成问题单。
Q:例行工作及原则（6）
A:A类项目有1000个软件的问题单，一共15周，平均每周约70个单；1000个问题单，驱动150个，协议250个，应用600个。而生产力，应用一天一个单，驱动一周一个单；所以驱动的人力需求是10人，应用也是10人。
Q:关键流程1
A:每天的dailybuild版本，要回归前一天入的所有单。回归可采用轮值值，每个组每天出一个人回归，轮流安排。
Q:关键流程2
A:每周转测试一个版本；把握好节奏。
Q:关键流程3
A:提前一周给出该版本必合问题单列表，即问题单解决计划。
Q:关键流程4
A:版本出来后，要做预测试。
Q:软件经理工作：出版本（1）
A:出版本要培养一个员工帮自己做，这个人要能够打包、解决一般的编译问题、了解apk版本、整理问题单入库表格、转测试、版本归档。在他培养好之前，软件经理压力很大。
Q:软件经理工作：出版本（2）
A:有一件事，软件经理必须要亲力亲为去搞定：就是确认每个apk是放在system分区，还是data分区，涉及到升级、fota、cust包、恢复出厂设置等，经常出问题。
Q:软件经理工作：问题单计划（1）
A:A类项目一般有1000个问题单，B类项目有700-800个。tr3到tr6一般14-16周左右的时间，每周问题单的量在70个左右。这一块也要培养一个人来做。
Q:软件经理工作：问题单计划（2）
A:每周至少要和资源组PL过一次问题单，70个问题单没有4个小时是过不完的。过单的目的是了解现状、计划何时解决、当前的困难。分三个组过：驱动、应用、协议。
Q:软件经理工作：问题单计划（3）
A:有三条线软件经理必须要cover住：产线、电信QC、内部测试+国家入网，优先级也是这个顺序。
Q:软件经理工作：产品团队的协同支持（1）
A:如果版本经理或SE是软件出身，那么他们会愿意参与软件事物，做一些决策，这样软件经理的压力会小一些。
Q:软件经理工作：产品团队的协同支持（2）
A:和测试部门沟通好，他们会同时处理多个产品，在共享经验、预知风险上作用很大。
Q:软件经理工作：软件团队的协同支持（1）
A:软件经理要让整个软件团队按照同一个节奏起舞。这个节奏就是入库问题单列表。包括三部分：问题单解决计划、入库问题单列表（包括回归）、风险问题单（待同步问题）列表。
Q:软件经理工作：电信TA
A:电信TA经常会一口气提几十个问题，而且一两天就要搞定。这个时候软件团队压力很大，那些要立即解决，那些延后解决，那些可以不解决，依赖于软件经理的判断力。
Q:软件经理工作：需求管理
A:需求来源：电信、第三方、内部。软件经理要参与SE组织的方案评审。
Q:OR
A:OR电子流是需求的唯一来源。
Q:IPD流程的裁剪
A:春耕=ST，UT、PT都不做。春耕用例，各资源组整理。测出的问题要解决，理论上100%用例要pass。
Q:软件经理工作：产品例会
A:由版本经理组织，项目五角+质量+装备参加。例会前，一定要把所有问题的情况都摸清楚。所以过单要安排在例会前一天的晚上搞。
Q:软件经理工作：关注点
A:版本经理、SE不关注软件人力投入，人力问题找资源组LM、PL解决。
Q:软件经理工作：加班
A:11-12点下班，要持续1-2个月。
Q:软件经理工作：内部沟通
A:每两周就要和产品组内的同事有一次正式沟通，了解其工作情况、感受、压力。
Q:软件经理工作：失败
A:归档版本延期；质量事故。
Q:软件经理工作：PK
A:（1）准备充分；（2）别人是怎么做的？历史数据；（3）据理力争。
Q:软件经理工作：器件替代（1）
A:包括三步：1.硬件经理启动替代，这阶段风险是没有通知软件；需要经常在项目例会上提醒硬件经理。
Q:软件经理工作：器件替代（2）
A:软件团队实现替代技术方案，这阶段风险是物料不到位，需要经常催；或者软件方案搞不定，替代失败。版本一定要用替代物料回归。
Q:软件经理工作：器件替代（3）
A:产线小批量验证，试制规模应该在200以上。要确保归档版本合入相关问题单。主要风险是产线用错版本，即任务令写错；或者替代效果不良，一般是硬件问题。
Q:cust库
A:定制都在cust库中，由软件经理整理需求，由应用组负责修改和维护。
Q:音频参数、射频参数都要加版本号
A:分三个主要版本：A初始；B转测试；C发货。音频参数每次都要提供全。
Q:tr4转测试，要保证没有已知问题
A:所以block的问题单、block的gira、block和fail的春耕用例，都需要专门说明原因。
Q:CTS测试
A:cst有34000多项。第一轮测试要测8个小时以上。失败项要再测。有11项是豁免的。
Q:功耗指标
A:中度用户：1天；重度用户：0.8天。
Q:cts版本
A:cts不用专门出版本。应用组负责预测试，用例全pass后，转测试组测试。没有问题就投递样机给google。有问题，第一责任人是应用。
Q:apr指标
A:apr在tr4之后就应该密切关注。部分概率性问题解决后需要等3个版本才能回归，会影响di值。关注每天的日报，如果不达标，就去找应用组确认下是否需要加大投入。
Q:beta测试
A:beta测试要推动提前，测试周期是4周，确认问题+抓log+提单，至少一周。如果搞晚了，就会严重影响tr5、tr6。
Q:电信需求管理
A:电信需求没有新的，old部分各C产品都会继承。只需要关注天翼和最新的电信入网QC问题即可。
Q:天翼需求管理
A:天翼需求已经下来了（2月6日），待确认有无新的。
Q:电信入网测试
A:如果一个产品一轮就通过了，就只需要一个月。目前除了Y210c利用了大量一线资源后，一次通过，其它产品都是2轮以上。所以需要准备2个月的时间。
Q:电信入网测试的难点
A:国际漫游和双卡双待。
Q:电信入网没过的影响
A:没过，也可以上市，但只能入B库，不走运营商渠道，运营商补贴也非常少。过了，就走A库。最近3个月（2月8日），就过了Y210S，其它产品，如C8825D、C8950都没有过。
Q:第三方应用的适配
A:很多apk依赖产品名、屏幕大小之类的信息，所以每个产品都要做预制apk的适配。周期：1-2周。风险：样机不够。
Q:ATT测试
A:tr5要做ATT测试；14台手机做7天。

// 版本相关工作
Q:试制版本归档（1）
A:准备：烧片版本+升级版本，烧片包括服务jtag加载包和生产jtag加载包（两者一样）、usb驱动、版本配套表和版本升级操作指导书。
Q:试制版本归档（2）
A:预测试报告，包括MMI测试项自检表，模拟生产预测试用例，以及LP工位定制说明（simlock）。
Q:试制版本归档（3）
A:转测试电子流，转给硬测经理，完成模拟生产（这个很重要，不允许出一点错，所以需要先做一次，过了再在完整环境下做）。
Q:试制版本归档（4）
A:有了模拟生产报告，就可以提归档电子流。
Q:版本相关工作（1）
A:必合问题单。软件经理先整理，和版本经理、测试经理、se确认。发给各资源组；
Q:版本相关工作（2）
A:确认编版本时间点、预测试、问题单回归和转测试等各阶段时间点；
Q:版本相关工作（3）
A:开工会，主要是确认时间和遗留问题；会议纪要发给大家；
Q:版本相关要申请如下资源（1）
A:vmo（1人天）；预测试资源（32条用例：0.5人天，130条：1.5人天）；
Q:版本相关要申请如下资源（2）
A:资源组（根据问题单回归数量，一般平均15个单一人天）；问题单回归资源需求（比如香港现网、cmu、模拟生产）。
Q:版本相关工作（4）
A:必合问题单发给vmp；编译版本前务必要check。漏合问题单要马上解决。无法解决的要及时和测试经理讨论，达不成共识就是无效版本。
Q:版本相关工作（5）
A:编译版本。需要资源组留守处理编译问题。
Q:版本相关工作（6）
A:版本编译过程中，整理问题单回归计划，要分组。
Q:版本相关工作（7）
A:版本出来后，组织预测试（人力、手机、现网卡、sd卡、用例）。预测试人力需求。fail项需要测试组分析，协议、应用各派一个人；
Q:版本相关工作（8）
A:组织问题单回归。fail项要及时处理。
Q:版本相关工作（9）
A:写转测试材料，注意版本号一定不能写错了。
Q:版本相关工作（10）
A:根据版本checklist，查下版本的可用性。要保证每个图标都可以点进去。
Q:版本相关工作（11）
A:提交转测试电子流。
Q:无效版本
A:归档版本很容易无效。商用版本以版本归档、发布给生产为最终目的，达成即为有效，其余均为无效版本。

// 产品分支策略
Q:代码同步方法（1）
A:底层主干的问题单每天下午6点一次性同步到平台主干；所以资源组CMO必须在五点前完成入库；而问题单责任人需要在四点前把单走到CMO归档。
Q:代码同步方法（2）
A:同步方向：GP --> trunk --> china。三套代码中的modem代码都为同一个；ap则不同。cust和2cust只有trunk有。
Q:代码同步方法（3）
A:GP的modem由底层和协议维护，GP主干的ap基本不会改；trunk主干的ap为应用维护。
Q:代码同步方法（4）
A:同一个分支上不同产品的编译命令不同，比如单卡、双卡产品，modem编译命令不同，但是boot.img、system.img一样。
Q:各产品没有拿到TA前，各分支的代码维护策略1
A:建议各分支维护上层代码，底层对所有产品的修改只入库到驱动平台代码分支中去，驱动一套代码，目的是提高效率和及时解决共性问题。问题单对各产品的影响由底层专家在问题单审核时保证。
Q:各产品没有拿到TA前，各分支的代码维护策略2
A:驱动平台代码分支基本上按照“高通硬件版本+Android版本”进行组合。最好一个硬件平台一套。目前做不到一套的几个因素是emmc和flash，以及双卡和单卡。
Q:拿到TA产品的代码维护策略（1）
A:产品将底层代码拷贝出一份和上层的组合成一套代码，拉出单独分支维护。底层问题单在统一入库到平台代码分支上的同时，根据测试、版本经理的意见有选择的将部分问题单入库到TA分支上。
Q:拿到TA产品的代码维护策略（2）
A:问题单同步的具体责任人是该款产品的接口人，负责底层问题单的整理，每周发给版本经理；对于重要且共性的问题，则及时知会。
Q:拿到TA产品的代码维护策略（3）
A:对于可直接合入的问题单，驱动不负责它的同步、验证、入库工作。不能直接合入的问题单，驱动重新提单，重构原问题单，流程同新问题单。
Q:拿到TA产品的代码维护策略（4）
A:TA分支上提的单，原则上应该合入驱动平台分支上，同步、验证、入库由底层负责。
Q:目标文件的维护策略1
A:由于产品形态不同，硬件设计上差异较大，软件上通过编译宏来控制；目标文件不可共用，各产品用各自的。
Q:目标文件的维护策略2
A:如果是相同产品形态的衍生产品，底层通过board id的方式进行自动识别，各产品共用一个目标文件。
Q:目标文件的维护策略3
A:对于不同频段的支持，由不同的qcn文件来保证，各产品用各自的efs，统一由底层维护。
Q:求着产品干活
A:没有主干是关键。引申出去，一个人的工作应该具有独立可验证性，如果没有，就会特别被动，需要经常求人。

// 大团队终端定制软件开放管理
Q:定制需求库
A:共有70多个国家的定制需求，所有产品共同完善。如果某个产品接受定制需求，首先要从库中获取需求包，如果有变更，则由该产品负责更新需求包。测试也要从这个库中获取需求。这样就实现了定制共享。
Q:新需求的管理
A:新需求如果导致不能共用主干代码的，这样的需求不接受。主线代码合入所有定制需求，各产品从主线取下来修改，通过配置项来控制。
Q:bug的管理
A:分支上发现的问题，必须合入主干。主干上维护一个问题单合入的总表。
Q:供应商引入的变更的管理
A:高通patch仅在主干或重点市场上升级。
Q:重构
A:如果某个模块问题比较多，对这个模块进行重构。
Q:产品运作
A:新产品刚开始，从主干拉出分支进行开发，到tr4a后回主干，在主干上稳定。小批量时，再拉出分支控制风险，在分支上量产。快速定制产品可在分支上再拉分支。
Q:产品宏、特性宏的管理
A:产品宏、特性宏定期整理。现状是主干上的宏泛滥。
Q:代码pc-lint
A:要求 0 warning。
Q:产品转维后的管理
A:没有维护组，产品是终身责任制，资源组同时做维护和新产品。
Q:产品组和软件大平台的关系
A:如果某个产品不按照统一分支策略来做，将得不到部门资源支持。软件经理要服从软件大平台的利益。
Q:产品人力投入
A:一个新产品开发，软件4-5人，开发代码2万行，测试组提单700-800个问题单。

// jack谈爱立信经验
Q:jack
A:原爱立信GSM总裁
Q:one track策略
A:产品始终只有一个main分支，不并行进行版本开发，决不merge，merge会引入大量问题，不稳定。
Q:对系统设计进行验证
A:在进入开发前，各模块系统设计人员一起封闭，在舞台上扮演自己的模块，逐一执行系统功能。在这个过程中可发现各模块对接口和需求的不同理解。
Q:实境测试
A:在用户的网络环境下测试。
Q:增量开发
A:小步快跑，尽量把迭代周期控制在2-3周内。
Q:平台容易出的问题（1）
A:jack不太认同大平台、小产品的策略。平台容易成为负担，会越来越庞大。
Q:平台容易出的问题（2）
A:平台关注的是工具，而不是业务和应用，容易走偏。
Q:平台容易出的问题（3）
A:不可能全面验证平台，验证都是跟着产品走。导致平台没有经过充分验证。
Q:平台容易出的问题（4）
A:平台无法把握优化力度，无法根据产品的量进行最大限度的做精。
Q:解决方案是：
A:对量最大的产品提供最大的自由度，而其它产品可以拷贝，形成平台效应。
Q:GSM的发展展望（2008年提出）
A:GSM至少还有10年的技术发展期，生命期可能时无止境的（这个的确有可能，因为语音需求永远存在，而GSM对语音完全够用）。一个产品，如果停顿了两年，几乎不可能在市场上重新翻身。
Q:爱立信的硬件版本管理
A:硬件平台只有两代，而且这两代使用相同的BOM元器件。爱立信是唯一可以对老基站升级到edge的公司。
Q:爱立信的软件版本管理
A:全球网上只有两个软件版本，全球版本升级时间少于半年。爱立信不打补丁，通过升级代替，因为补丁会导致版本混乱。
Q:爱立信预研管理
A:当预研的成果要用到产品中去，会把整个项目组搬到产品团队中去。
Q:问题单可视化
A:问题要写在纸上，挂在墙上。如果多得墙都挂不上，这个项目就烂了，要整改。问题要可视化，要能反映问题的严重性。
Q:对问题分析工具的看法
A:关键是不积累问题，fault出现了马上改正，而不是积累下来、然后为此衍生出很多工具和办法。
Q:测试要review 设计和代码
A:推荐使用role play，把测试和几个系统专家拉出去封闭两天，每人上台讲自己的功能、输入、输出和依赖。每一条大家都要问why和what。安排专人记录，给出error report。
Q:daily build， daily test
A:目的是可以做到 daily release。
Q:项目变更控制
A:项目80%的工作是用来处理需求不稳定；如果新的feature还没启动开发，可以变更。
Q:测试完整性
A:测试要从头测，完整的测，不能只测试有错部分。
Q:如何评估软件人员的效率？
A:jack说他不做这种估计，而关注软件质量。
Q:爱立信没有质量部门
A:曾经有，没有用，后来取消了。GSM产品700多人，只有一个质量工程师。爱立信质量还是业界最好。
Q:用自己的产品
A:开发交换机的团队就直接用自己的产品。哪部分出bug，瘫机了大家都受影响。结果质量好得很。
Q:供应商管理
A:重要元器件，先谈妥价格，再做设计。
Q:拜访客户
A:要访问第一个客户、访问问题最多的客户、访问没有问题的客户。
Q:爱立信是专家决策、管理保证
A:爱立信项目采用system akut，是一个专家论坛，由系统组长当主席，几个不同领域专家主导，PM和部门领导参与，但后者目的不是管理或主导，而且负责把论坛的决定执行下去。

// 华为手机软件的现状
Q:android软件现状（1）
A:除去硬件问题，android软件系统应该很成熟了，也提供了基础功能，比如电话、短信等。应用则可以从网店下。那么软件开发为什么问题那么多？
Q:android软件现状（2）
A:P1有14000个问题，一般产品有8000个问题。以前数据卡事故比较多，我们想如何降低事故的总数，在小循环内部改进。欧阳明来管质量后，提出来要降低版本数。版本数下来了，问题和事故自然就少了。
Q:大硬件可靠性
A:大硬件可靠性是有方法、可实现、可衡量、可管理的。通过一些仿真和数字/专家模型已经可以做到可预测。全世界的手机厂商只要下狠心，都在在几年或1-2年做到七七八八。
Q:软件可靠性
A:不容乐观。
Q:SE的工作内容偏差
A:SE对系统的负责度不够，只负责tr3之前阶段，做的工作主要集中在业务需求分析，软件架构过程基本不参与。
Q:android代码的量
A:for android 4.0，use sloccount。ansi C 15908K（其中kernel 9728K）；xml：5880K；C++：5860K；java：3217K；ASM：619K。

// git
Q:branch
A:分支。其中，master：主分支
Q:commit
A:每个单独提交的版本。我们要求一个问题单一个commit，但是如果同时修改了两个仓的问题单就没有办法控制。HEAD：分支的最后一个commit，表示最新代码。
Q:tag
A:即标签。分支上打了标签的一个commit。每个commit都可以生成一个tag。tag可以理解为被命名的commit。
Q:object name
A:又称为SHA-1 ID，是附着于每个commit的tag。即每次提交都会自动生成一个标签。
Q:cache
A:做了库操作，未commit的部分。保存cache的文件，称为index。
Q:库描述
A:即库的地址。最常用：git://host.xz[:port]/path/to/repo.git/。
Q:仓
A: Git 仓库就是那个.git目录，其中存放的是我们所提交的文档索引内容，Git 可基于文档索引内容对其所管理的文档进行内容追踪，从而实现文档的版本控制。.git目录位于工作目录内。
Q:分支、仓、commit、标签的关系
A:分支是代码实体，commit和标签是分支的时间戳/快照，标签是被命名的commit。
Q:查看任何一个版本的源代码
A:show <tag>:<path>
Q:工作版本状态
A:git status
Q:查看日志
A:git log [v1..v2] [path]
Q:查找修改内容
A:git log -S'search'
Q:调整log格式
A:git log --pretty=oneline
Q:生成patch
A:两个tag间：git diff <tag1>..<tag2>
Q:repo
A:repo的功能是把很多个git数据库合并成一个大工程，这个功能很方便，因为如果做发行版常常要引用很多个别人的的git库的。
Q:repo init
A:repo init -u https://android.googlesource.com/platform/manifest
Q:和每个git库同步
A:repo sync
Q:怎样在代码文件夹下所有git库都建立分支？
A:repo start --all <分支名>
Q:怎样删除代码文件夹下所有git库的分支？
A:repo abandon <分支名>
Q:怎样知道代码文件夹下都改动了那些？
A:repo diff
Q:怎样把我的提交上传的gerrit上？
A:repo upload
Q:查看修改
A:git config --list
Q:想查看以前都有哪些提交？
A:git log
Q:想查看以前的两次提交有什么区别？
A:git diff <log上显示的哈希值1> <log上显示的哈希值2>
Q:想把自己的修改提交到本地的git库里？
A:git add <文件名>    git commit -m "<注释>"

// BOARD ID管理
Q:BOARD ID管理（1）
A:资源按产品分配如下，软件分配范围WCDMA从0x2000开始分配，CDMA从0x4000开始分配。
Q:BOARD ID管理（2）
A:单双卡共板的产品，主版本号一致，使用子版本号区分单双卡，V0~V3为双卡产品，V4~VF为单卡产品。
Q:BOARD ID管理（3）
A:单双卡共板的WCDMA系列产品：V0~V3为UD产品，V4~V7为U-1产品，V8~VB为U-51产品，剩余的子版本号预留。
Q:BOARD ID管理（4）
A:单双卡共板的CDMA系列产品：V0~V3为C+G双卡产品，V4~V7为C+G单卡产品，剩余的子版本号预留。
Q:BOARD ID管理（5）
A:单双卡非共板产品，WCDMA和CDMA产品各自分配主版本号，子版本号分配规则同1）和2），遵从单双卡分配规则。
Q:BOARD ID管理（6）
A:产品分支统一不带后缀，如：machine_is_msm8x25_G520U，产品分支为G520U、G520C而不会出现G520UD、G520U-1、G520U-51、G520CD类似产品名。
Q:BOARD ID管理（7）
A:产品的主次版本号分开，在app_info中增加sub_board_id，表示子版本号，原有board_id表示主版本号，不再带有子版本号，增加product_name表示项目名称如：G520UD、G520U-1、G520U-51、G520CD，主要用于EFS归一、软件版本归一。
Q:BOARD ID管理（8）
A:.NFC、compass两硬件，是否在位，不通过BOARD ID区分，增加ADC检测识别device id，用于区分器件是否在位，用于软件版本合一；
Q:BOARD ID管理（9）
A:所有BOARD ID申请由硬件发起，由平台负责人辨别需求后按需分配。
